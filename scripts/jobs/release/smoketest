#!/bin/bash -ex

# This script requires sbtDistVersionOverride=-Dproject.version=...

integrationRepoUrl=${integrationRepoUrl-"https://scala-ci.typesafe.com/artifactory/scala-integration/"}

sbt -Dsbt.log.noformat=true \
  "set resolvers += \"scala-integration\" at \"$integrationRepoUrl\"" \
  $sbtDistVersionOverride \
  clean run


# test the command line tools

rm -rf sandbox
mkdir sandbox
cd sandbox

url="http://downloads.lightbend.com/scala/$version"
wget -nv -O scala-$version.tgz $url/scala-$version.tgz
tar xzvf scala-$version.tgz

bin=`pwd`/scala-$version/bin



$bin/scala -e 'assert("11".toInt == 11)'

scalapOutput=`$bin/scalap scala.collection.immutable.List | grep 'def head' | tr -d ' '`
[[ $scalapOutput == "defhead:A" ]] || {
  echo "scalap test failed, returned $scalapOutput"
  exit 1
}

testCommand() {
  output=`$bin/$1 2>&1 | grep "$2" || :`
  [[ $output =~ .*$2.* ]] || {
    echo "$1 command output does not mention $2: $output"
    exit 1
  }
}

testCommand "scalac" "classpath"
testCommand "fsc" "shutdown"
testCommand "scaladoc" "doc-title"


echo 'object Hello extends App { println(1 to 4 filter (_ % 2 == 0) mkString " - ") }' > Hello.scala
$bin/scalac Hello.scala
helloOutput=`$bin/scala Hello`

[[ $helloOutput == "2 - 4" ]] || {
  echo "Hello returned $helloOutput"
  exit 1
}


# check properties files

checkVersionNumber() {
  unzip $bin/../lib/scala-$1.jar $1.properties
  versionOutput=`cat $1.properties | grep "^version.number=" | sed 's/version\.number=\(.*\)/\1/'`
  [[ $versionOutput == $version ]] || {
    echo "version number in $1.properties does not match: $versionOutput"
    exit 1
  }
}

checkVersionNumber "library"
checkVersionNumber "compiler"
