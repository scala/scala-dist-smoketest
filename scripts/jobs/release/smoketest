#!/bin/bash -ex

function ensureVersion() {
  local verPat="[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9-]+)?"
  [[ "$version" =~ $verPat ]] || {
    echo "Not a valid Scala version: '$version'"
    exit 1
  }
}

clearIvyCache() {
  rm -fv $HOME/.ivy2/exclude_classifiers $HOME/.ivy2/exclude_classifiers.lock
  rm -rfv $HOME/.ivy2/cache/org.scala-lang $HOME/.ivy2/cache/org.scala-lang.modules
  rm -rfv $HOME/.ivy2/local/org.scala-lang $HOME/.ivy2/local/org.scala-lang.modules
  if [ -d $HOME/.ivy2 ]; then find $HOME/.ivy2 -name "*compiler-interface*$version*" | xargs rm -rfv; fi
  if [ -d $HOME/.sbt ]; then find $HOME/.sbt -name "*compiler-interface*$version*" | xargs rm -rfv; fi
}

if [[ "$TRAVIS_EVENT_TYPE" == "api" ]]; then
  ensureVersion
else
  # Use some recent version to validate changes in smoketest itself
  version="2.13.10"
fi

clearIvyCache

sbtDistVersionOverride="-Dproject.version=$version"

integrationRepoUrl=${integrationRepoUrl-"https://scala-ci.typesafe.com/artifactory/scala-integration/"}
sonatypeStagingUrl="https://oss.sonatype.org/content/repositories/staging/"

sbt -Dsbt.log.noformat=true \
  "set resolvers ++= List(\"scala-integration\" at \"$integrationRepoUrl\", \"sonatype-staging\" at \"$sonatypeStagingUrl\")" \
  $sbtDistVersionOverride \
  clean run


# test the command line tools

rm -rf sandbox
mkdir sandbox
cd sandbox

url="https://downloads.lightbend.com/scala/$version"
wget -nv -O scala-$version.tgz $url/scala-$version.tgz
tar xzvf scala-$version.tgz

bin=`pwd`/scala-$version/bin



$bin/scala -e 'assert("11".toInt == 11)'

scalapOutput=`$bin/scalap scala.collection.immutable.List | grep 'def ::\[' | tr -d ' '`
[[ $scalapOutput == "def::[B>:A](elem:B):scala.collection.immutable.List[B]={/*compiledcode*/}" ]] || {
  echo "scalap test failed, returned $scalapOutput"
  exit 1
}

testCommand() {
  output=`$bin/$1 2>&1 | grep "$2" || :`
  [[ $output =~ .*$2.* ]] || {
    echo "$1 command output does not mention $2: $output"
    exit 1
  }
}

testCommand "scalac" "classpath"
testCommand "fsc" "shutdown"
testCommand "scaladoc" "doc-title"


echo 'object Hello extends App { println(1 to 4 filter (_ % 2 == 0) mkString " - ") }' > Hello.scala
$bin/scalac Hello.scala
helloOutput=`$bin/scala Hello`

[[ $helloOutput == "2 - 4" ]] || {
  echo "Hello returned $helloOutput"
  exit 1
}


# check properties files

checkVersionNumber() {
  unzip $bin/../lib/scala-$1.jar $1.properties
  versionOutput=`cat $1.properties | grep "^version.number=" | sed 's/version\.number=\(.*\)/\1/'`
  [[ $versionOutput == $version ]] || {
    echo "version number in $1.properties does not match: $versionOutput"
    exit 1
  }
}

checkVersionNumber "library"
checkVersionNumber "compiler"
